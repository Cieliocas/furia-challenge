// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  accounts      Account[]
  sessions      Session[]
  profile       Profile?
  activities    Activity[]
  questionnaireResponses QuestionnaireResponse[]
  socialConnections SocialConnection[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Profile {
  id              String   @id @default(cuid())
  userId          String   @unique
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  fanType         String?
  engagementScore Int?     @default(0)
  knowledgeScore  Int?     @default(0)
  loyaltyScore    Int?     @default(0)
  bio             String?  @db.Text
  favoriteGame    String?
  favoritePlayer  String?
  memberSince     DateTime @default(now())
  completionRate  Int      @default(0)
  updatedAt       DateTime @updatedAt
}

model QuestionnaireResponse {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  questionId String
  answer     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([userId, questionId])
}

model Activity {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type        String
  description String
  metadata    Json?
  createdAt   DateTime @default(now())
}

model SocialConnection {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  provider    String
  providerId  String
  accessToken String?  @db.Text
  refreshToken String? @db.Text
  expiresAt   DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([userId, provider])
}

model Question {
  id          String   @id @default(cuid())
  text        String
  type        String
  options     Json?
  category    String
  order       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model FanType {
  id          String   @id @default(cuid())
  name        String   @unique
  description String   @db.Text
  criteria    Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
